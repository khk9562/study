// ===== DOM 계층구조 =====
/*
Element (최상위)
  ├─ HTMLElement (HTML 요소들의 부모)
  │   ├─ HTMLDivElement
  │   ├─ HTMLButtonElement
  │   └─ ...
  └─ SVGElement (SVG 요소들의 부모)
      ├─ SVGSVGElement (<svg> 태그)
      ├─ SVGCircleElement (<circle> 태그)
      ├─ SVGRectElement (<rect> 태그)
      ├─ SVGPathElement (<path> 태그)
      ├─ SVGGElement (<g> 태그)
      └─ ...
*/

// ===== 1. SVGElement vs SVGSVGElement =====

// SVGElement: 모든 SVG 요소들의 공통 부모 타입
const svgElement: SVGElement = document.querySelector('circle')!; // ✅
const svgElement2: SVGElement = document.querySelector('rect')!;  // ✅
const svgElement3: SVGElement = document.querySelector('svg')!;   // ✅

// SVGSVGElement: <svg> 태그만 가리키는 구체적 타입
const svgRoot: SVGSVGElement = document.querySelector('svg')!;    // ✅
// const wrongType: SVGSVGElement = document.querySelector('circle')!; // ❌ 에러!

// ===== 2. 실제 차이점: 사용 가능한 메서드/프로퍼티 =====

// SVGElement (기본 기능만)
const basicSVG: SVGElement = document.querySelector('svg')!;
// basicSVG.createSVGRect(); // ❌ 에러! SVGElement에는 없는 메서드

// SVGSVGElement (<svg> 전용 기능)
const rootSVG: SVGSVGElement = document.querySelector('svg')!;
rootSVG.createSVGRect();      // ✅ 가능!
rootSVG.createSVGPoint();     // ✅ 가능!
rootSVG.createSVGMatrix();    // ✅ 가능!
rootSVG.getCurrentTime();     // ✅ 가능!
rootSVG.pauseAnimations();    // ✅ 가능!

// ===== 3. React useRef에서의 차이 =====
import { useRef } from 'react';

// 일반적인 SVG 요소들
const circleRef = useRef<SVGCircleElement>(null);
const rectRef = useRef<SVGRectElement>(null);
const pathRef = useRef<SVGPathElement>(null);
const gRef = useRef<SVGGElement>(null);

// SVG 루트 요소
const svgRef = useRef<SVGSVGElement>(null); // <svg> 태그용

// 잘못된 예시
// const wrongRef = useRef<SVGSVGElement>(null);
// <circle ref={wrongRef} /> // ❌ 타입 에러!

// ===== 4. 실제 사용 예시 =====
const SVGChart = () => {
  const svgRef = useRef<SVGSVGElement>(null); // <svg> 전용
  const groupRef = useRef<SVGGElement>(null); // <g> 전용
  
  useEffect(() => {
    if (svgRef.current) {
      // SVGSVGElement만 가능한 기능들
      const bbox = svgRef.current.getBBox();
      const matrix = svgRef.current.createSVGMatrix();
      const point = svgRef.current.createSVGPoint();
      
      // 뷰포트 관련 기능
      svgRef.current.setAttribute('viewBox', '0 0 800 600');
    }
    
    if (groupRef.current) {
      // SVGGElement 기능들
      const transform = groupRef.current.transform.baseVal;
      // groupRef.current.createSVGMatrix(); // ❌ 에러! SVGGElement에는 없음
    }
  }, []);

  return (
    <svg ref={svgRef} width={800} height={600}>
      <g ref={groupRef} transform="translate(50, 50)">
        <circle cx={100} cy={100} r={50} />
      </g>
    </svg>
  );
};

// ===== 5. D3에서의 활용 =====
import * as d3 from 'd3';

// 제네릭으로 정확한 타입 지정
const svgSelection: d3.Selection<SVGSVGElement, unknown, null, undefined> 
  = d3.select<SVGSVGElement, unknown>('svg');

const circleSelection: d3.Selection<SVGCircleElement, unknown, null, undefined>
  = d3.select<SVGCircleElement, unknown>('circle');

// 체이닝할 때 타입 안전성
svgSelection
  .attr('width', 800)      // ✅ SVG 속성
  .attr('viewBox', '0 0 800 600') // ✅ SVG 전용 속성
  // .attr('href', '#link')   // ❌ <svg>에는 href 속성 없음

// ===== 6. 타입 가드 활용 =====
function handleSVGElement(element: SVGElement) {
  if (element instanceof SVGSVGElement) {
    // 이제 element는 SVGSVGElement 타입으로 좁혀짐
    element.createSVGRect();     // ✅ 가능!
    element.pauseAnimations();   // ✅ 가능!
  } else if (element instanceof SVGCircleElement) {
    // element는 SVGCircleElement 타입
    element.r.baseVal.value = 50; // ✅ 원의 반지름 설정
  }
}

// ===== 7. 실무 팁: 언제 어떤 타입 쓸까? =====

// ✅ <svg> 루트 태그 조작할 때
const svgRoot = useRef<SVGSVGElement>(null);

// ✅ 특정 SVG 요소 조작할 때
const circle = useRef<SVGCircleElement>(null);
const rect = useRef<SVGRectElement>(null);
const path = useRef<SVGPathElement>(null);
const group = useRef<SVGGElement>(null);

// ✅ 여러 SVG 요소를 다룰 때 (공통 부모 타입)
const elements: SVGElement[] = [
  document.querySelector('circle')!,
  document.querySelector('rect')!,
  document.querySelector('path')!
];

// ===== 8. 자주 사용하는 SVG Element 타입들 =====
/*
SVGSVGElement      - <svg>
SVGGElement        - <g> (그룹)
SVGCircleElement   - <circle>
SVGRectElement     - <rect>
SVGPathElement     - <path>
SVGLineElement     - <line>
SVGTextElement     - <text>
SVGImageElement    - <image>
SVGDefsElement     - <defs>
SVGClipPathElement - <clipPath>
*/

// ===== 실제 D3 차트에서의 활용 =====
const D3Chart = () => {
  const svgRef = useRef<SVGSVGElement>(null);    // 루트 SVG
  const gRef = useRef<SVGGElement>(null);        // 차트 그룹
  
  useEffect(() => {
    const svg = d3.select(svgRef.current);       // SVGSVGElement
    const g = svg.select('.chart-group');        // SVGGElement
    
    // 각각의 고유 기능 활용 가능
    svg.attr('viewBox', '0 0 800 600');          // SVG 전용
    g.attr('transform', 'translate(50, 50)');    // 그룹 변환
  }, []);
  
  return (
    <svg ref={svgRef}>
      <g ref={gRef} className="chart-group">
        {/* 차트 내용 */}
      </g>
    </svg>
  );
};